" for vundle
source ~/.vim/plug_vimrc
source ~/.vim/basic_vimrc

" Leader
let mapleader=","

" 左右窗口设置
map <F5> :NERDTreeToggle<CR>

" 生成代码索引
map <C-F10> :!ctags -R .<CR><CR>
map <C-F11> :!cscope -bqR<CR><CR> :cs add cscope.out<CR>

" 丢弃缓冲区，重新加载
map <C-l> :e!<CR>

" 头文件搜索路径，for C language
set path+=/usr/local/include
set path+=/usr/include/c++/6.3.1

" for cscope and ctags
if has("cscope")
	set csprg=cscope
	set csto=0
	set cst
	set nocsverb
	if filereadable("cscope.out")
		cs add cscope.out
	elseif $CSCOPE_DB != ""
		cs add $CSCOPE_DB
	endif
	set csverb
endif

" for taglist 
let Tlist_Show_One_File = 1
let Tlist_Exit_OnlyWindow = 1
let Tlist_Use_Right_Window = 1
let Tlist_Auto_Open = 0

" for gntentags
let g:gutentags_project_root = ['.root', '.svn', '.git', '.hg', '.project']
let g:gutentags_ctags_tagfile = '.tags'

" 将自动生成的 tags 文件全部放入 ~/.cache/tags 目录中，避免污染工程目录
let s:vim_tags = expand('~/.cache/tags')
let g:gutentags_cache_dir = s:vim_tags

" 配置 ctags 的参数
let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
let g:gutentags_ctags_extra_args += ['--c++-kinds=+px']
let g:gutentags_ctags_extra_args += ['--c-kinds=+px']

" 检测 ~/.cache/tags 不存在就新建
if !isdirectory(s:vim_tags)
   silent! call mkdir(s:vim_tags, 'p')
endif

" for ale
let g:ale_linters_explicit = 1
let g:ale_completion_delay = 500
let g:ale_echo_delay = 20
let g:ale_lint_delay = 500
let g:ale_echo_msg_format = '[%linter%] %code: %%s'
let g:ale_lint_on_text_changed = 'normal'
let g:ale_lint_on_insert_leave = 1
let g:airline#extensions#ale#enabled = 1

let g:ale_c_gcc_options = '-Wall -O2 -std=c99'
let g:ale_cpp_gcc_options = '-Wall -O2 -std=c++14'
let g:ale_c_cppcheck_options = ''
let g:ale_cpp_cppcheck_options = ''

" for NERDTree
let NERDChistmastree = 1

" for clang-complete
let g:clang_complete_copen = 1
let g:clang_periodic_quick_fix = 1
let g:clang_snippets = 1
let g:clang_close_preview = 1
let g:clang_use_library = 1

"for YouCompleteMe
let g:ycm_add_preview_to_completeopt = 0
let g:ycm_show_diagnostics_ui = 0
let g:ycm_server_log_level = 'info'
let g:ycm_min_num_identifier_candidate_chars = 2
let g:ycm_collect_identifiers_from_comments_and_strings = 1
let g:ycm_complete_in_strings=1
let g:ycm_key_invoke_completion = '<c-z>'
set completeopt=menu,menuone

noremap <c-z> <NOP>

let g:ycm_semantic_triggers =  {
           \ 'c,cpp,python,go,rust': ['re!\w{2}'],
           \ 'cs,lua,javascript': ['re!\w{2}'],
           \ }

" for syntastic
let g:syntastic_always_populate_loc_list = 0
let g:syntastic_auto_loc_list = 2
let g:syntastic_python_checkers = ["flake8"]
let g:syntastic_python_flake8_exec = "python2"	" 默认python3的环境加这一句
let g:syntastic_python_flake8_args = "-m flake8 --max-line-length=1048"	" 最大行长度为1048
let g:syntastic_go_checkers=['']
" let g:syntastic_rust_checkers = ['rustc']
let g:loaded_syntastic_java_javac_checker = 1

" for noexpandtab
function Tab8()
    set noexpandtab
    set tabstop=8
endfunction
au BufEnter,BufNew *.conf call Tab8()
au BufEnter,BufNew *.proto call Tab8()
au BufEnter,BufNew *.y call Tab8()

" for rust and racer
au BufEnter,BufNew *.rs set ft=rust
au BufEnter,BufNew *.lalrpop set ft=rust

let g:rustfmt_autosave = 1
set hidden
let g:racer_cmd = "/home/qupeng/.cargo/bin/racer"
let g:racer_experimental_completer = 1

au FileType rust nmap gd <Plug>(rust-def)
au FileType rust nmap gs <Plug>(rust-def-split)
au FileType rust nmap gx <Plug>(rust-def-vertical)
au FileType rust nmap <leader>gd <Plug>(rust-doc)
